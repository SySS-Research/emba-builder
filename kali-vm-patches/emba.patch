diff --git a/image.yaml b/image.yaml
index f68b42e..56fa43b 100644
--- a/image.yaml
+++ b/image.yaml
@@ -128,6 +128,11 @@ actions:
     script: scripts/setup-vagrant.sh
 {{ end }}
 
+  - decription: "Install EMBA"
+    action: run
+    chroot: true
+    script: scripts/emba.sh
+
   - description: "Final cleanup (from within)"
     action: run
     chroot: true
diff --git a/scripts/emba.sh b/scripts/emba.sh
new file mode 100755
index 0000000..14b0c17
--- /dev/null
+++ b/scripts/emba.sh
@@ -0,0 +1,153 @@
+#!/bin/sh
+
+set -eu
+
+git clone https://github.com/e-m-b-a/emba.git /opt/emba
+cd /opt/emba
+# We can not do the full EMBA installation in this chroot directory since the
+# docker daemon does not run there. Hence, defer the actual installation to the
+# first boot of the VM.
+
+# Install and enable a systemd unit that finishes the EMBA setup.
+cat - >/etc/systemd/system/emba-setup.service <<EOU
+[Unit]
+Description=EMBA Setup
+Requires=network-online.target
+
+[Service]
+Type=oneshot
+WorkingDirectory=/opt/emba
+ExecStart=/opt/emba/installer.sh -d
+ExecStartPost=systemctl disable emba-setup.service
+User=root
+Group=root
+
+[Install]
+WantedBy=multi-user.target
+EOU
+ln -s /etc/systemd/system/emba-setup.service /etc/systemd/system/multi-user.target.wants/
+
+
+# Enable automatic firmware analysis jobs.
+embauser=autoemba
+embashare=/srv/emba
+# Create a user account for SFTP access.
+useradd -c 'Automatic EMBA firmware analysis' -m -r -U "${embauser}"
+# Set up systemd unit to automaticall analyse firmware uploaded to the share.
+cat - > /etc/systemd/system/autoemba@.path <<EOU
+[Unit]
+Description=Automatic firmware analysis
+
+[Path]
+DirectoryNotEmpty=${embashare}/upload/%i
+MakeDirectory=true
+DirectoryMode=0777
+
+[Install]
+WantedBy=multi-user.target
+EOU
+cat - > /etc/systemd/system/autoemba@.service <<EOU
+[Unit]
+Description=Automatic firmware analysis
+
+[Service]
+Type=oneshot
+WorkingDirectory=/opt/emba
+ExecStart=/usr/local/sbin/autoemba.sh ${embashare} %i
+User=root
+Group=root
+EOU
+cat - > /usr/local/sbin/autoemba.sh <<"EOS"
+#!/bin/bash
+embashare="$1"
+profile="$2"
+# Briefly wait for upload to complete.
+sleep 30
+# Move uploaded files to a temporary working directory.
+tmpdir="$(mktemp -d -p "${embashare}/../")"
+trap "rm -rf -- '${tmpdir}'" EXIT INT KILL QUIT
+mv "${embashare}/upload/${profile}"/* "${tmpdir}"
+for f in "${tmpdir}"/*; do
+    flock /var/lock/emba.lock /opt/emba/emba -f "$f" -p "/opt/emba/scan-profiles/${profile}.emba" -l "${embashare}/logs/${f##*/}/"
+    tar -czf "${embashare}/logs/${f##*/}.tar.gz" -C "${embashare}/logs/" "${f##*/}/"
+    rm -rf "${embashare}/logs/${f##*/}/"
+    printf 'Analysis of %s using profile %s finished\n' "${f##*/}" "${profile}"
+done
+EOS
+chmod 0755 /usr/local/sbin/autoemba.sh
+# Create SFTP share directory.
+mkdir -p "${embashare}" "${embashare}/upload/" "${embashare}/logs/"
+chmod 0777 "${embashare}/logs/"
+autoemba_services=''
+# Make systemd watch a directory for each EMBA scan profile.
+for profile in /opt/emba/scan-profiles/*.emba; do
+    profile="${profile##*/}"
+    profile="${profile%.emba}"
+    ln -s /etc/systemd/system/autoemba@.path "/etc/systemd/system/multi-user.target.wants/autoemba@${profile}.path"
+    autoemba_services="${autoemba_services} -u autoemba@${profile}.service"
+done
+# Configure SSHd.
+cat - > /etc/ssh/sshd_config.d/emba.conf <<EOF
+Subsystem sftp internal-sftp
+Match User ${embauser}
+  ChrootDirectory ${embashare}
+EOF
+# Enable SSHd.
+ln -s /usr/lib/systemd/system/ssh.service /etc/systemd/system/
+ln -s /usr/lib/systemd/system/ssh.service /etc/systemd/system/multi-user.target.wants/
+
+# Make the output of EMBA service units visible on TTY1.
+cat - > /etc/systemd/system/emba-status@.service <<EOU
+[Unit]
+Description=EMBA status on %I
+After=systemd-user-sessions.service plymouth-quit-wait.service systemd-journald.service
+Before=emba-setup.service
+ConditionPathExists=/dev/tty0
+
+[Service]
+ExecStart=-/usr/bin/journalctl -f -u emba-setup.service ${autoemba_services} --no-hostname
+Type=idle
+Restart=always
+RestartSec=0
+StandardInput=tty
+StandardOutput=tty
+TTYPath=/dev/%I
+TTYReset=yes
+TTYVHangup=yes
+TTYVTDisallocate=yes
+IgnoreSIGPIPE=no
+SendSIGHUP=yes
+
+# Unset locale for the console getty since the console has problems
+# displaying some internationalized messages.
+UnsetEnvironment=LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION
+
+[Install]
+WantedBy=getty.target
+DefaultInstance=tty1
+EOU
+rm /etc/systemd/system/getty.target.wants/getty@tty1.service
+ln -s /etc/systemd/system/emba-status@.service /etc/systemd/system/getty.target.wants/emba-status@tty1.service
+
+
+# Kali does not currently set up any networking. We need that, obviously.
+cat - > /etc/systemd/network/eth0.network <<EOU
+[Match]
+Name=eth0
+
+[Network]
+DHCP=true
+EOU
+mkdir -p /etc/systemd/system/sockets.target.wants/ /etc/systemd/system/sysinit.target.wants/ /etc/systemd/system/network-online.target.wants/
+ln -s /usr/lib/systemd/system/systemd-networkd.service /etc/systemd/system/dbus-org.freedesktop.network1.service
+ln -s /usr/lib/systemd/system/systemd-networkd.service /etc/systemd/system/multi-user.target.wants/
+ln -s /usr/lib/systemd/system/systemd-networkd.socket /etc/systemd/system/sockets.target.wants/
+ln -s /usr/lib/systemd/system/systemd-network-generator.service /etc/systemd/system/sysinit.target.wants/
+ln -s /usr/lib/systemd/system/systemd-networkd-wait-online.service /etc/systemd/system/network-online.target.wants/
+apt-get install -y systemd-resolved
+mkdir -p /etc/systemd/resolve.conf.d/
+cat - >/etc/systemd/resolve.conf.d/nocrap.conf <<EOC
+[Resolve]
+LLMNR=no
+MulticastDNS=no
+EOC
